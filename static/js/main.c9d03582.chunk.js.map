{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/Dictionary.js","serviceWorker.js","index.js"],"names":["Card","props","word","rom","phon","gram","meaning","react_default","a","createElement","className","CardList","_ref","words","cardsArray","map","user","i","components_Card","key","id","SearchBox","searching","type","placeholder","onChange","divStyle","overflowY","overflowX","padding","border","borderColor","borderRadius","height","Scroll","style","children","Dictionary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearch","event","setState","target","value","state","_this2","fetch","then","response","json","_this3","filterWord","filter","toLowerCase","includes","components_Scroll","components_SearchBox","components_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_Dictionary","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9d03582.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {word, rom, phon, gram, meaning} = props;\r\n    return(\r\n        <div className='flashcard'>\r\n            <div className='mword'><h1>{word}</h1></div>\r\n            <div className='rom'>\r\n                <h2>{rom}</h2>\r\n            </div>            \r\n                <div className='phon text'><p>{phon}</p></div>\r\n                <div className='second-row'>\r\n                <div className='gram text'><p>{gram}</p></div>\r\n                <div className='meaning text'><p>{meaning}</p></div>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n//we can only return one thing\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({words}) =>{\r\n    const cardsArray = words.map((user, i) => {\r\n        return (\r\n        <Card key={i} \r\n        id={words[i].id} \r\n        word={words[i].word} \r\n        rom={words[i].rom} \r\n        phon={words[i].phon} \r\n        gram={words[i].gram} \r\n        meaning={words[i].meaning}\r\n        />)\r\n        })\r\n    return(\r\n    <div className='wrapper'>\r\n      {cardsArray}\r\n    </div>\r\n    );\r\n    }\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searching}) => {\r\n    return (\r\n        <div className='search-box'>\r\n            <input type='search' placeholder='Search...' onChange={searching}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//props\r\n//state\r\n//children\r\n\r\nvar divStyle = {\r\n    overflowY: 'scroll',\r\n    overflowX: 'hidden',\r\n    padding: '10px',\r\n    border: '1px solid',\r\n    borderColor: '#e9cfb0',\r\n    borderRadius: '5px',\r\n    height: '500px'\r\n}\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={divStyle} >\r\n            {props.children}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass Dictionary extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            words: [],\r\n            searching: ''\r\n        }\r\n    }\r\n\r\n    onSearch = (event) => {\r\n        this.setState({searching: event.target.value})\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://hokumi.github.io/aaith-dictionary/words.json')\r\n        .then(response => response.json())\r\n        .then(words => this.setState({words: words}))        \r\n    }\r\n\r\n    render(){\r\n        const filterWord = this.state.words.filter(words => {\r\n            const eng = words.meaning.toLowerCase() + words.word.toLowerCase();\r\n            return (eng.includes(this.state.searching.toLowerCase())\r\n            );            \r\n        });\r\n        return (\r\n            <div className='portDic'>\r\n             <Scroll>\r\n                <SearchBox searching={this.onSearch}/>\r\n                    <CardList words={filterWord} />\r\n                </Scroll>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Dictionary;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './containers/index.css';\nimport Dictionary from './containers/Dictionary'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Dictionary />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}